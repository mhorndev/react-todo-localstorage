{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["icons","App","useState","data","setData","text","setText","useEffect","localStorage","todos","setItem","JSON","stringify","parse","className","map","item","onClick","filter","x","id","onComplete","complete","onInput","e","target","innerText","spellCheck","contentEditable","placeholder","existing","Date","now","document","getElementById","class","data-size","href","aria-label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"2PAGMA,G,MACG,WADHA,EAEO,YAFPA,EAGS,0BAmGAC,MAhGf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,KA2Cb,OAXAC,qBAAU,WACHC,aAAaC,OAChBD,aAAaE,QAAQ,QAASC,KAAKC,UAAU,KAT/CR,EAAQO,KAAKE,MAAML,aAAaC,UAY/B,IAEHF,qBAAU,WAVRC,aAAaE,QAAQ,QAASC,KAAKC,UAAUT,MAY5C,CAACA,IAGF,sBAAKW,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,0BAIA,sBAAKA,UAAU,YAAf,UACGX,GACCA,EAAKY,KAAI,SAACC,GACR,OACE,sBAAKF,UAAU,YAAf,UACE,qBAAKA,UAAU,YAAf,SAA4BE,EAAKX,OACjC,mBAAGS,UAAU,0BAA0BG,QAAS,kBAnD9D,SAAoBD,GAClBZ,EAAQD,EAAKe,QAAO,SAAAC,GAAC,OAAIA,EAAEC,KAAOJ,EAAKI,OAkD2BC,CAAWL,IAAjE,SACKA,EAAKM,SAAWtB,EAAgBA,MAHPgB,EAAKI,OAS3C,sBAAKN,UAAU,qBAAf,UACE,qBACEM,GAAG,WAAWG,QAxDxB,SAAqBC,GACnBlB,EAAQkB,EAAEC,OAAOC,YAwDTC,WAAW,QACXC,gBAAgB,OAChBC,YAAY,WACZf,UAAU,8BAEZ,mBACEG,QAAS,WA1DJ,KAATZ,IACFD,GAAQ,SAAA0B,GAAQ,4BAAQA,GAAR,CAAkB,CAACV,GAAGW,KAAKC,MAAO3B,KAAKA,EAAMiB,UAAS,QACtEhB,EAAQ,IACR2B,SAASC,eAAe,YAAYR,UAAY,KAwD1CZ,UAAW,0BACA,KAATT,EAAc,UAAW,YAH7B,SAIGL,UAIP,sBACA,wBAAQc,UAAU,WAAWG,QA3DjC,WACEb,EAAQ,KA0DN,yBAEA,mCACE,4BACE,8CAAgB,mBAAG+B,MAAM,6BAAzB,iBAEF,mBACEC,YAAU,QACVtB,UAAU,gBACVuB,KAAK,sDACLC,aAAW,iBAJb,mCClFOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjB,SAASC,eAAe,SAM1BK,M","file":"static/js/main.6bcc843d.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\n\nconst icons = {\n    add: 'add_box',\n    checked: 'check_box',\n    unchecked: 'check_box_outline_blank'\n}\n\nfunction App() {\n  const [data, setData] = useState([])\n  const [text, setText] = useState(\"\")\n\n  function onComplete(item) {\n    setData(data.filter(x => x.id !== item.id))\n  }\n\n  function onTextInput(e) {\n    setText(e.target.innerText)\n  }\n\n  function onNewTodo(item) {\n    if (text !== \"\") {\n      setData(existing => [...existing, {id:Date.now(), text:text, complete:false}]);\n      setText(\"\");\n      document.getElementById('text-box').innerText = \"\";\n    }\n  }\n\n  function clearTodos() {\n    setData([])\n  }\n\n  function readTodos() {\n    setData(JSON.parse(localStorage.todos))\n  }\n\n  function writeTodos() {\n    localStorage.setItem('todos', JSON.stringify(data))\n  }\n\n  useEffect(() => {\n    if (!localStorage.todos) {\n      localStorage.setItem('todos', JSON.stringify([]))\n    }\n    readTodos()\n  }, [])\n\n  useEffect(() => {\n    writeTodos()\n  }, [data])\n\n  return (\n    <div className=\"app\">\n      <div className=\"title\">\n        My Todo List\n      </div>\n\n      <div className=\"container\">\n        {data &&\n          data.map((item) => {\n            return (\n              <div className=\"todo-item\" key={item.id}>\n                <div className=\"todo-text\">{item.text}</div>\n                <i className=\"material-icons checkbox\" onClick={() => onComplete(item)}>\n                    {item.complete ? icons.checked : icons.unchecked}\n                </i>\n              </div>\n            )\n          })\n        }\n        <div className=\"todo-item new-item\">\n          <div \n            id=\"text-box\" onInput={onTextInput}\n            spellCheck=\"false\" \n            contentEditable=\"true\" \n            placeholder=\"New todo\"\n            className=\"new-item-text single-line\" \n          />\n          <i \n            onClick={() => onNewTodo()}\n            className={\"material-icons btnAdd \" \n            +(text !== \"\" ? \"enabled\": \"disabled\")}>\n            {icons.add}\n          </i>\n        </div>\n      </div>\n      <p/>\n      <button className=\"btnClear\" onClick={clearTodos}>Clear todos</button>\n\n      <footer>\n        <p>\n          <code>Made with <i class=\"icon ion-heart secondary\"></i> in React</code>\n        </p>\n        <a \n          data-size=\"large\"\n          className=\"github-button\" \n          href=\"https://github.com/mhorndev/react-todo-localstorage\" \n          aria-label=\"View on GitHub\">View on GitHub\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}